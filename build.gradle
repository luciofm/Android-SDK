buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.0'
        classpath 'org.robolectric:robolectric-gradle-plugin:0.14.+'
    }
}


allprojects {
    repositories {
        mavenCentral()
    }
    version = version
}

apply plugin: 'android-library'
apply plugin: 'robolectric'

android {

    tasks.whenTaskAdded { theTask ->
        def taskName = theTask.name.toString()
        if ("testDebug".toString().equals(taskName)) {
            /**
             * Listen for when robolectric adds the 'testDebug' task and when it does, add the -noverify
             * option to that task's jvmArgs.  This allows us to turn off byte code verification when
             * running our unit tests.
             */
            theTask.jvmArgs('-noverify')
        }
    }

    compileSdkVersion 21
    buildToolsVersion '21.1.1'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    def versionPropsFile = file('version.properties')

    def getVersionName = { ->
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }

    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def code = versionProps['VERSION_CODE'].toInteger() + 1
        def version = getVersionName()

        versionProps['VERSION_CODE']=code.toString()
        versionProps['VERSION_NAME']=version.toString()
        versionProps.store(versionPropsFile.newWriter(), null)

        defaultConfig {
            versionCode code
            versionName version
            minSdkVersion 14
            targetSdkVersion 18
        }
    }
    else {
        throw new GradleException("Could not read version.properties!")
    }

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 14
        versionCode 1
        versionName getVersionName()
        testInstrumentationRunner "com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner"
        multiDexEnabled true
    }

    dexOptions {
        javaMaxHeapSize "2g"
        jumboMode true
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dexOptions {
        jumboMode = true
    }

    sourceSets {
        androidTest {
            setRoot('src/test')
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/ASL2.0'
    }
}

task uploadArchives(type: Copy) {
    from 'build/outputs/aar/'
    include '*.aar'

    into '../app/lib'
}
uploadArchives.dependsOn test
uploadArchives.dependsOn assembleDebug

def eclipseZipFolder = 'build/tmp/EclipseZip'
task createEclipseZip(type: Zip) {
    baseName = 'Sharethrough_Android_SDK'
    from eclipseZipFolder
    include '**/*'
    includeEmptyDirs(true)
}
task createEclipseZipFolder << {
    def source = 'build/intermediates/bundles/release/'
    copy {
        from(source)
        include 'AndroidManifest.xml'
        into eclipseZipFolder
    }
    copy {
        from(source)
        include 'res/**/*'
        into eclipseZipFolder
    }
    copy {
        from(projectDir)
        include 'project.properties'
        include '.classpath'
        include '.project'
        into eclipseZipFolder
    }
    copy {
        from(source)
        include 'classes.jar'
        into "${eclipseZipFolder}/libs/"
    }
}
createEclipseZip.dependsOn createEclipseZipFolder
createEclipseZipFolder.dependsOn test
createEclipseZip.dependsOn assembleRelease
assemble.dependsOn(createEclipseZip)

task copyTestAssets(type: Copy) {
    from('src/test/assets/')
    into 'build/test-classes/assets/'
}
test.dependsOn copyTestAssets

robolectric {
    include '**/*Test.class'
    exclude '**/espresso/**/*.class'
}

dependencies {
    repositories {
        mavenCentral()
    }

    compile 'com.google.android.gms:play-services:6.+'
    compile files("lib/STRPicasso.jar")
    // Espresso
    androidTestCompile('junit:junit:4.11') {
        exclude module: 'hamcrest-core'
    }
    testCompile 'com.google.guava:guava:14.0.1'
    testCompile 'org.hamcrest:hamcrest-integration:1.1'
    testCompile 'org.hamcrest:hamcrest-core:1.1'
    testCompile 'org.hamcrest:hamcrest-library:1.1'
    androidTestCompile('org.robolectric:robolectric:2.4') {
        exclude module: 'classworlds'
        exclude module: 'commons-logging'
        exclude module: 'httpclient'
        exclude module: 'maven-artifact'
        exclude module: 'maven-artifact-manager'
        exclude module: 'maven-error-diagnostics'
        exclude module: 'maven-model'
        exclude module: 'maven-project'
        exclude module: 'maven-settings'
        exclude module: 'plexus-container-default'
        exclude module: 'plexus-interpolation'
        exclude module: 'plexus-utils'
        exclude module: 'wagon-file'
        exclude module: 'wagon-http-lightweight'
        exclude module: 'wagon-provider-api'
        exclude group: 'com.android.support', module: 'support-v4'
    }
    androidTestCompile('com.squareup:fest-android:1.0.+') {
        exclude group: 'com.android.support', module: 'support-v4'
    }
    androidTestCompile 'org.mockito:mockito-core:1.+'
}

apply plugin: 'idea'

idea {
    module {
        testOutputDir = file('build/test-classes/debug')
    }
}

sourceSets {
    docs {
        java {
            srcDir "$projectDir"
            include  'src/main/java/com/sharethrough/sdk/Sharethrough.java'
            include  'src/main/java/com/sharethrough/sdk/SharethroughListAdapter.java'
            include  'src/main/java/com/sharethrough/sdk/BasicAdView.java'
            include  'src/main/java/com/sharethrough/sdk/IAdView.java'
        }
    }
}

task generateSDKDocs(type: Javadoc) {
    title = "Sharethrough Android SDK Docs"
    description = "Generates Javadoc for SDK"
    source = sourceSets.docs.allJava
    destinationDir = file("$projectDir/docs")
}