buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.2'
        classpath 'org.robolectric:robolectric-gradle-plugin:0.11.+'
    }
}

allprojects {
    repositories {
        mavenCentral()
    }
    version = version
}

apply plugin: 'com.android.library'
apply plugin: 'robolectric'

android {
    compileSdkVersion 19
    buildToolsVersion '19.1.0'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    defaultConfig {
//        applicationId "com.sharethrough.android.sdk"
        minSdkVersion 8
        targetSdkVersion 14
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner"
    }
    buildTypes {
        debug {
            runProguard false
        }
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dexOptions {
        jumboMode = true
    }

    sourceSets {
        androidTest {
            setRoot('src/test')
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/ASL2.0'
    }
}

task uploadArchives(type: Copy) {
    from 'build/outputs/aar/'
    include '*.aar'

    into '../app/lib'
}
uploadArchives.dependsOn test
uploadArchives.dependsOn assembleDebug

// TODO:
//android.buildTypes.all{ theBuildType ->
//    task ("${theBuildType.name}createEclipseZip")<<{
//        //use debuggable flag
//        println theBuildType.debuggable
//    }
//}
def eclipseZipFolder = 'build/tmp/EclipseZip'
task createEclipseZip(type: Zip) {
    baseName = 'Sharethrough_Android_SDK'
    from eclipseZipFolder
    include '**/*'
    includeEmptyDirs(true)
}
task createEclipseZipFolder << {
    // TODO: replace debug with theBuildType
    def source = 'build/intermediates/bundles/debug/'
    copy {
        from(source)
        include 'AndroidManifest.xml'
        into eclipseZipFolder
    }
    copy {
        from(source)
        include 'res/**/*'
        into eclipseZipFolder
    }
    copy {
        from(projectDir)
        include 'project.properties'
        include '.classpath'
        include '.project'
        into eclipseZipFolder
    }
    copy {
        from(source)
        include 'classes.jar'
        into "${eclipseZipFolder}/libs/"
    }
    copy {
        from('src/main/java/')
        include('**/SharethroughStub.java')
        includeEmptyDirs(false)
        into "${eclipseZipFolder}/src"
    }
}
createEclipseZip.dependsOn createEclipseZipFolder
// TODO: test${theBuildType}
createEclipseZipFolder.dependsOn test
// TODO: assemble${theBuildType}
createEclipseZip.dependsOn assembleDebug
assemble.dependsOn(createEclipseZip)

task copyTestAssets(type: Copy) {
    from('src/test/assets/')
    into 'build/test-classes/assets/'
}
test.dependsOn copyTestAssets

robolectric {
    include '**/*Test.class'
    exclude '**/espresso/**/*.class'
}

dependencies {
    repositories {
        mavenCentral()
    }
    // Espresso
    androidTestCompile('junit:junit:4.11') {
        exclude module: 'hamcrest-core'
    }
    testCompile 'com.google.guava:guava:14.0.1'
    testCompile 'org.hamcrest:hamcrest-integration:1.1'
    testCompile 'org.hamcrest:hamcrest-core:1.1'
    testCompile 'org.hamcrest:hamcrest-library:1.1'
    androidTestCompile('org.robolectric:robolectric:2.3') {
        exclude module: 'classworlds'
        exclude module: 'commons-logging'
        exclude module: 'httpclient'
        exclude module: 'maven-artifact'
        exclude module: 'maven-artifact-manager'
        exclude module: 'maven-error-diagnostics'
        exclude module: 'maven-model'
        exclude module: 'maven-project'
        exclude module: 'maven-settings'
        exclude module: 'plexus-container-default'
        exclude module: 'plexus-interpolation'
        exclude module: 'plexus-utils'
        exclude module: 'wagon-file'
        exclude module: 'wagon-http-lightweight'
        exclude module: 'wagon-provider-api'
    }
    androidTestCompile 'com.squareup:fest-android:1.0.+'
    androidTestCompile 'org.mockito:mockito-core:1.+'
}

apply plugin: 'idea'

idea {
    module {
        testOutputDir = file('build/test-classes/debug')
    }
}
